"""
This is the main file designed to contain all the Project Euler problems in one neat and tidy place.  The goal is to functionalize and standardize all of the problem solutions.
"""

from time import time
import math
from math import factorial
import string

# Common functions

def pythagorean(a, b):
    c = math.sqrt(pow(a, 2) + pow(b, 2))
    return c

def triangle(number):
    i = 1
    divList = []
    while i not in divList and i <= number:
        if number % i == 0:
            divList.append(i)
            divList.append(number / i)
        i += 1
    return divList

def findDivisors(number):
    i = 2
    divList = [1]
    while i not in divList and i <= number:
        if number % i == 0:
            divList.append(i)
            if (number / i) not in divList:
                divList.append(number / i)
        i += 1
    return divList

def amicable(divisors):
    total = 0
    for d in divisors:
        total = total + d
    return total

def sumName(name, values):
    total = 0
    for a in range(len(name)):
        total += values[name[a]]
    return total
        
def fibonacci(a, b):
    return a + b

def getTerms(number):
    i = 0
    terms = []
    while i < len(str(number)):
        terms.append(int(str(number)[i]))
        i += 1
    return terms
    
def sumTerms(list):
    total = 0
    for i in list:
        total += i**5
    return total

def breakdown(number):
    l = []
    for i in range(len(str(number))):
        l.append(int(str(number)[i]))
    return l
        
def sumFactors(list):
    x = 0
    for i in digits:
        x += factorial(i)
    return x

def rotate(numbers):
    x = []
    for n in range(len(str(numbers))):
        x.append(str(numbers)[n])
    y = x.pop()
    x.insert(0, y)
    return int("".join(x))

def isprime(number):
    if number % 2 == 0:
        return False
    for x in range(3, int(number**0.5)+1, 2):
        if number % x == 0:
            return False
    return True
    
def iscircular(number, circulars):
    primes = []
    for i in range(len(str(number))):
        if isprime(number) == False:
            return False
        else:
            primes.append(number)
            number = rotate(number)
    for p in primes:
        if p not in circulars: circulars.append(p)


# Functions for problems

def one():
    """
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
    
    Find the sum of all the multiples of 3 or 5 below 1000.
    
    ANSWER: 233168
    """
    
    i = 1
    sum = 0
    while i < 1000:
        if i % 3 == 0 or i % 5 == 0:
            sum = sum + i
            i = i + 1
        else:
            i = i + 1
    return sum
    

def two():
    """
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    
    ANSWER: 4613732
    """
    
    sum = 0
    i = 1
    j = 2
    
    while j < 4000000:
        if j % 2 == 0:
            sum = sum + j
            temp = i
            i = j
            j = temp + i
        else:
            temp = i
            i = j
            j = temp + i
    return sum



def three():
    """
    The prime factors of 13195 are 5, 7, 13 and 29.
    
    What is the largest prime factor of the number 600851475143 ?
    
    ANSWER: 6857
    """
    
    number = 600851475143
    
    i = 2
    prime = 0
    
    while number >= i:
        if number % i == 0:
            prime = i
            number = number / i
            i = 2
        else:
            i = i + 1
    return prime



def four():
    """
    A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 * 99.
    
    Find the largest palindrome made from the product of two 3-digit numbers.
    
    ANSWER: 906609
    """
    
    i = 999
    j = i
    largest = 0
    
    while i > 0:
        while j > 0:
            number = str(i * j)
            forward = str(number)
            reverse = ""
            for char in number:
                reverse = char + reverse
            if forward == reverse:
                if largest < i * j:
                    largest = i * j
                break
            else:
                j = j - 1
        i = i - 1
        j = i
    return largest 







def five():
    """
    2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
    
    What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
    
    ANSWER: 232792560
    """
    
    n = 20
    divisible = False
    
    while divisible == False:
        n += 20
        divisible = True
        for i in range(20, 0, -1):
            if n % i != 0:
                divisible = False
                break
    return n

def six():
    """
    The sum of the squares of the first ten natural numbers is,
    
    12 + 22 + ... + 102 = 385
    
    The square of the sum of the first ten natural numbers is,
    
    (1 + 2 + ... + 10)2 = 552 = 3025
    
    Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640.
    
    Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
    
    ANSWER: 25164150
    """
    
    sum_squared = 0
    squared_sum = 0
    
    for i in range(1, 101):
        sum_squared += i**2
        squared_sum += i
    squared_sum = squared_sum**2
    
    return squared_sum - sum_squared


def seven():
    """
    By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
    
    What is the 10001st prime number?
    
    ANSWER: 104743
    """
    
    total = 1
    n = 2
    
    while total < 10001:
        if isprime(n) == True:
            total += 1
        #prime = True
        #for i in range(2, n):
            #if n % i == 0:
                #prime = False
        #if prime == True:
            #total += 1
        n += 1
        
    return n-1 


def eight():
    """
    The four adjacent digits in the 1000-digit number that have the greatest product are 9 * 9 * 8 * 9 = 5832.

    
    73167176531330624919225119674426574742355349194934
    96983520312774506326239578318016984801869478851843
    85861560789112949495459501737958331952853208805511
    12540698747158523863050715693290963295227443043557
    66896648950445244523161731856403098711121722383113
    62229893423380308135336276614282806444486645238749
    30358907296290491560440772390713810515859307960866
    70172427121883998797908792274921901699720888093776
    65727333001053367881220235421809751254540594752243
    52584907711670556013604839586446706324415722155397
    53697817977846174064955149290862569321978468622482
    83972241375657056057490261407972968652414535100474
    82166370484403199890008895243450658541227588666881
    16427171479924442928230863465674813919123162824586
    17866458359124566529476545682848912883142607690042
    24219022671055626321111109370544217506941658960408
    07198403850962455444362981230987879927244284909188
    84580156166097919133875499200524063689912560717606
    05886116467109405077541002256983155200055935729725
    71636269561882670428252483600823257530420752963450
    
    Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
    
    ANSWER: 23514624000
    """
    
    number = "73167176531330624919225119674426574742355349194934\
96983520312774506326239578318016984801869478851843\
85861560789112949495459501737958331952853208805511\
12540698747158523863050715693290963295227443043557\
66896648950445244523161731856403098711121722383113\
62229893423380308135336276614282806444486645238749\
30358907296290491560440772390713810515859307960866\
70172427121883998797908792274921901699720888093776\
65727333001053367881220235421809751254540594752243\
52584907711670556013604839586446706324415722155397\
53697817977846174064955149290862569321978468622482\
83972241375657056057490261407972968652414535100474\
82166370484403199890008895243450658541227588666881\
16427171479924442928230863465674813919123162824586\
17866458359124566529476545682848912883142607690042\
24219022671055626321111109370544217506941658960408\
07198403850962455444362981230987879927244284909188\
84580156166097919133875499200524063689912560717606\
05886116467109405077541002256983155200055935729725\
71636269561882670428252483600823257530420752963450"

    greatest = 0
    
    i = 0
    while i < len(number) - 12:
        product = 1
        for j in range(13):
            product *= int(number[i + j])
            #j += 1
        if product > greatest:
            greatest = product
        i += 1
        
    return greatest

def nine():
    """
    A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
    
    a2 + b2 = c2
    For example, 32 + 42 = 9 + 16 = 25 = 52.
    
    There exists exactly one Pythagorean triplet for which a + b + c = 1000.
    Find the product abc.
    
    ANSWER: 31875000
    """
    
    a = 3
    b = 4
    c = pythagorean(a, b)
    
    while a + b + c < 1001:
        while a + b + c < 1001:
            if a + b + c == 1000:
                return a * b * c
            b += 1
            c = pythagorean(a, b)
        a += 1
        b = a + 1
        c = pythagorean(a, b)
        
def ten():
    """
    The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
    
    Find the sum of all the primes below two million.
    """
    
    primes = [2]
    n = 3
    
    while n < 2000000:
        if isprime(n) == True:
            primes.append(n)
        n += 2
        #isprime = True
        #for prime in primes:
            #if n % prime == 0:
                #isprime = False
                #break
        #if isprime == True:
            #primes.append(n)
        #isprime = True
        #n += 2
    
    #for prime in primes:
        #sum += prime
        
    return sum(primes)

def eleven():
    """In the 20*20 grid below, four numbers along a diagonal line have been marked in red.
    
    08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
    49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
    81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
    52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
    22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
    24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
    32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
    67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
    24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
    21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
    78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
    16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
    86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
    19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
    04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
    88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
    04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
    20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
    20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
    01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
    The product of these numbers is 26 * 63 * 78 * 14 = 1788696.
    
    What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20*20 grid?
    
    ANSWER: 70600674
    """
    
    matrix = [[8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 5, 77, 91, 8],
              [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0],
              [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65],
              [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91],
              [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],
              [24, 47, 32, 60, 99, 03, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],
              [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],
              [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21],
              [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],
              [21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95],
              [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92],
              [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57],
              [86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],
              [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40],
              [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],
              [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],
              [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36],
              [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16],
              [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54],
              [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]]
    
    greatest = 0
    product = 1
    
    # Find highest product of four left to right numbers
    for i in range(20):
        j = 0
        while j < 17:
            for k in range(4):
                product *= matrix[i][j + k]
            if product > greatest:
                greatest = product
            product = 1
            j += 1
        
    # Find highest product of four up and down numbers
    for i in range(20):
        j = 0
        while j < 17:
            for k in range(4):
                product += matrix[j + k][i]
            if product > greatest:
                greatest = product
            product = 1
            j += 1
            
    # Find highest product of four diagonal up/down numbers
    for i in range(17):
        j = 0
        while j < 17:
            for k in range(4):
                product *= matrix[i + k][j + k]
            if product > greatest:
                greatest = product
            product = 1
            j += 1
    
    # Find highest product of four diagonal down/up numbers
    for i in range(3, 20):
        j = 0
        while j < 17:
            for k in range(4):
                product *= matrix[i - k][j + k]
            if product > greatest:
                greatest = product
            product = 1
            j += 1
            
            
    #for i in range(17):
    #    for j in range(4):
    #        print matrix[i + j][0],
    #    print
    
    return greatest

def twelve():
    """
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    
    Let us list the factors of the first seven triangle numbers:
    
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.
    
    What is the value of the first triangle number to have over five hundred divisors?
    
    ANSWER: 76576500
    """        
        
    total = 0
    subject = 0
    sum = 0
    highest = 0
    while total < 500:
        subject += 1
        sum += subject
        divisors = triangle(sum)
        total = len(divisors)
        #print "%d: %s = %d" % (subject, str(divisors), total) 
        if total > highest:
            highest = total    
    return subject

def thirteen():
    """
    Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
    
    (Numbers provided in numbers variable)
    
    ANSWER: 5537376230
    """
    
    numbers = [37107287533902102798797998220837590246510135740250,
               46376937677490009712648124896970078050417018260538,
               74324986199524741059474233309513058123726617309629,
               91942213363574161572522430563301811072406154908250,
               23067588207539346171171980310421047513778063246676,
               89261670696623633820136378418383684178734361726757,
               28112879812849979408065481931592621691275889832738,
               44274228917432520321923589422876796487670272189318,
               47451445736001306439091167216856844588711603153276,
               70386486105843025439939619828917593665686757934951,
               62176457141856560629502157223196586755079324193331,
               64906352462741904929101432445813822663347944758178,
               92575867718337217661963751590579239728245598838407,
               58203565325359399008402633568948830189458628227828,
               80181199384826282014278194139940567587151170094390,
               35398664372827112653829987240784473053190104293586,
               86515506006295864861532075273371959191420517255829,
               71693888707715466499115593487603532921714970056938,
               54370070576826684624621495650076471787294438377604,
               53282654108756828443191190634694037855217779295145,
               36123272525000296071075082563815656710885258350721,
               45876576172410976447339110607218265236877223636045,
               17423706905851860660448207621209813287860733969412,
               81142660418086830619328460811191061556940512689692,
               51934325451728388641918047049293215058642563049483,
               62467221648435076201727918039944693004732956340691,
               15732444386908125794514089057706229429197107928209,
               55037687525678773091862540744969844508330393682126,
               18336384825330154686196124348767681297534375946515,
               80386287592878490201521685554828717201219257766954,
               78182833757993103614740356856449095527097864797581,
               16726320100436897842553539920931837441497806860984,
               48403098129077791799088218795327364475675590848030,
               87086987551392711854517078544161852424320693150332,
               59959406895756536782107074926966537676326235447210,
               69793950679652694742597709739166693763042633987085,
               41052684708299085211399427365734116182760315001271,
               65378607361501080857009149939512557028198746004375,
               35829035317434717326932123578154982629742552737307,
               94953759765105305946966067683156574377167401875275,
               88902802571733229619176668713819931811048770190271,
               25267680276078003013678680992525463401061632866526,
               36270218540497705585629946580636237993140746255962,
               24074486908231174977792365466257246923322810917141,
               91430288197103288597806669760892938638285025333403,
               34413065578016127815921815005561868836468420090470,
               23053081172816430487623791969842487255036638784583,
               11487696932154902810424020138335124462181441773470,
               63783299490636259666498587618221225225512486764533,
               67720186971698544312419572409913959008952310058822,
               95548255300263520781532296796249481641953868218774,
               76085327132285723110424803456124867697064507995236,
               37774242535411291684276865538926205024910326572967,
               23701913275725675285653248258265463092207058596522,
               29798860272258331913126375147341994889534765745501,
               18495701454879288984856827726077713721403798879715,
               38298203783031473527721580348144513491373226651381,
               34829543829199918180278916522431027392251122869539,
               40957953066405232632538044100059654939159879593635,
               29746152185502371307642255121183693803580388584903,
               41698116222072977186158236678424689157993532961922,
               62467957194401269043877107275048102390895523597457,
               23189706772547915061505504953922979530901129967519,
               86188088225875314529584099251203829009407770775672,
               11306739708304724483816533873502340845647058077308,
               82959174767140363198008187129011875491310547126581,
               97623331044818386269515456334926366572897563400500,
               42846280183517070527831839425882145521227251250327,
               55121603546981200581762165212827652751691296897789,
               32238195734329339946437501907836945765883352399886,
               75506164965184775180738168837861091527357929701337,
               62177842752192623401942399639168044983993173312731,
               32924185707147349566916674687634660915035914677504,
               99518671430235219628894890102423325116913619626622,
               73267460800591547471830798392868535206946944540724,
               76841822524674417161514036427982273348055556214818,
               97142617910342598647204516893989422179826088076852,
               87783646182799346313767754307809363333018982642090,
               10848802521674670883215120185883543223812876952786,
               71329612474782464538636993009049310363619763878039,
               62184073572399794223406235393808339651327408011116,
               66627891981488087797941876876144230030984490851411,
               60661826293682836764744779239180335110989069790714,
               85786944089552990653640447425576083659976645795096,
               66024396409905389607120198219976047599490197230297,
               64913982680032973156037120041377903785566085089252,
               16730939319872750275468906903707539413042652315011,
               94809377245048795150954100921645863754710598436791,
               78639167021187492431995700641917969777599028300699,
               15368713711936614952811305876380278410754449733078,
               40789923115535562561142322423255033685442488917353,
               44889911501440648020369068063960672322193204149535,
               41503128880339536053299340368006977710650566631954,
               81234880673210146739058568557934581403627822703280,
               82616570773948327592232845941706525094512325230608,
               22918802058777319719839450180888072429661980811197,
               77158542502016545090413245809786882778948721859617,
               72107838435069186155435662884062257473692284509516,
               20849603980134001723930671666823555245252804609722,
               53503534226472524250874054075591789781264330331690]
    
    sum = 0
    
    for n in numbers:
        sum += n
        
    return int(str(sum)[:10])
    
def fourteen():
    """
    The following iterative sequence is defined for the set of positive integers:
    
    n -> n/2 (n is even)
    n -> 3n + 1 (n is odd)
    
    Using the rule above and starting with 13, we generate the following sequence:
    
    13 -> 40 -> 20 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1
    It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
    
    Which starting number, under one million, produces the longest chain?
    
    NOTE: Once the chain starts the terms are allowed to go above one million.
    
    ANSWER: 837799
    """
    
    longest = 0
    most_terms = 0
    i = 2
    
    while i < 1000001:
        n = i
        terms = 0
        while n != 1:
            if n % 2 == 0:
                n = n / 2
            else:
                n = 3 * n + 1
            terms += 1
        if terms > most_terms:
            most_terms = terms
            longest = i
        i += 1
    
    return longest

def fifteen():
    """
    Starting in the top left corner of a 2 2 grid, there are 6 routes (without backtracking) to the
    bottom right corner.
    
    How many routes are there through a 20 20 grid?
    
    ANSWER: 137846528820
    """

    currentcell = 1.0
    cellpaths = 2.0
    
    while currentcell < 20.0:
        currentcell += 1.0
        cellpaths = cellpaths * (4.0 - 2.0/currentcell)
        
    return cellpaths
    
def sixteen():
    """
    215 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
    
    What is the sum of the digits of the number 2**1000?
    
    ANSWER: 1366
    """
    
    number = str(pow(2, 1000))
    sum = 0
    
    for i in number:
        sum += int(i)
        
    return sum 
    
def seventeen():
    """
    If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
    
    If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?
    
    
    NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of "and" when writing out numbers is in compliance with British usage.
    
    ANSWER: 21124
    """
    
    ones = {1: "one", 2: "two", 3: "three", 4: "four", 5: "five", 6: "six", 7: "seven", 8: "eight", 9: "nine", 0: ""}
    tens = {2: "twenty", 3: "thirty", 4: "forty", 5: "fifty", 6: "sixty", 7: "seventy", 8: "eighty", 9: "ninety", 0: ""}
    teens = {10: "ten", 11: "eleven", 12: "twelve", 13: "thirteen", 14: "fourteen", 15: "fifteen", 16: "sixteen", 17: "seventeen", 18: "eighteen", 19: "nineteen"}
    hundred = "hundred"
    thousand = "onethousand"
    
    number = 1
    total = 0
    
    while number < 1000:
        n = str(number)
        places = len(n)
        word = ""
        if places == 1:
            word = ones[int(n[-1])]
        elif places == 2 and int(n[-2]) == 1:
            word = teens[int(n[-2:])]
        elif places == 2 and int(n[-2]) != 1:
            word = tens[int(n[-2])] + ones[int(n[-1])]
        elif places == 3 and int(n[-2]) == 1:
            word = ones[int(n[-3])] + hundred + teens[int(n[-2:])]
        elif places == 3 and int(n[-2]) != 1:
            word = ones[int(n[-3])] + hundred + tens[int(n[-2])] + ones[int(n[-1])]
        if places == 3 and int(n[-2:]) != 0:
            word += "and"
        total += len(word)
        number += 1
        
    
    return total + len(thousand)
        
def eighteen():
    """By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.
    
    3
    7 4
    2 4 6
    8 5 9 3
    
    That is, 3 + 7 + 4 + 9 = 23.
    
    Find the maximum total from top to bottom of the triangle below:
    
    75
    95 64
    17 47 82
    18 35 87 10
    20 04 82 47 65
    19 01 23 75 03 34
    88 02 77 73 07 63 67
    99 65 04 28 06 16 70 92
    41 41 26 56 83 40 80 70 33
    41 48 72 33 47 32 37 16 94 29
    53 71 44 65 25 43 91 52 97 51 14
    70 11 33 28 77 73 17 78 39 68 17 57
    91 71 52 38 17 14 91 43 58 50 27 29 48
    63 66 04 68 89 53 67 30 73 16 69 87 40 31
    04 62 98 27 23 09 70 98 73 93 38 53 60 04 23
    
    NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)
    """

    return 0

def nineteen():
    """You are given the following information, but you may prefer to do some research for yourself.
    
    1 Jan 1900 was a Monday.
    Thirty days has September,
    April, June and November.
    All the rest have thirty-one,
    Saving February alone,
    Which has twenty-eight, rain or shine.
    And on leap years, twenty-nine.
    A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
    How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?
    
    ANSWER: 171
    """
    
    # Julian dates for January 1, 1901 and January 1, 2001
    start = 2415385
    end = 2451910
    
    years = 100
    months = 12
    monthDays = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}
    leapDays = {1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}
    
    dateRange = end - start
    
    total = 0
    sundays = 0
    
    for year in range(years):
        for i in range(months):
            a = i + 1
            if (year + 1) % 4 == 0: 
                for j in range(leapDays[a]):
                    total += 1
                    if j == 0 and total % 7 == 6:
                        sundays += 1
            else:
                for j in range(monthDays[a]):
                    total += 1
                    if j == 0 and total % 7 == 6:
                        sundays += 1                
                    
    return sundays
            
def twenty():
    """
    n! means n * (n - 1) * ... * 3 * 2 * 1
    
    For example, 10! = 10 * 9 * ... * 3 * 2 * 1 = 3628800,
    and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.
    
    Find the sum of the digits in the number 100!
    ANSWER: 648
    """
    
    n = 100
    factorial = 1
    sum = 0
    
    while n > 0:
        factorial *= n
        n -= 1
    
    for c in str(factorial):
        sum += int(c)
        
    return sum

def twentyone():
    """
    Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
    If d(a) = b and d(b) = a, where a != b, then a and b are an amicable pair and each of a and b are called amicable numbers.
    
    For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.
    
    Evaluate the sum of all the amicable numbers under 10000.
    
    ANSWER: 31626
    """
    
    notamicable = []
    isamicable = []
    
    for i in range(10000):
        if i not in notamicable and i not in isamicable:
            a = i
            b = amicable(findDivisors(a))
            c = amicable(findDivisors(b))
            if a == c and not a == b:
                isamicable.append(a)
                isamicable.append(b)
            else:
                notamicable.append(a)
                notamicable.append(b)
    
    print isamicable
    t = 0
    for v in isamicable:
        t += v
    return t
        
def twentytwo():
    """
    Using names.txt (right click and 'Save Link/Target As...'), a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.
    
    For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938 * 53 = 49714.
    
    What is the total of all the name scores in the file?
    
    ANSWER: 871198282
    """
    
    
    source = open("./files/names.txt", "r")
    rawnames = source.read()
    source.close()
    rawnames = rawnames.replace('"','')
    names = rawnames.split(',')
    names.sort()
    totalsum = 0
    
    letterValues = {}
    
    for i in range(len(string.uppercase)):
        letterValues[string.uppercase[i]] = i + 1
        
    for i in range(len(names)):
        totalsum += sumName(names[i], letterValues) * (i + 1)
        
    return totalsum

def twentythree():
    deficient = []
    for i in range(30):
        divisors = findDivisors(i)
        print i, divisors, sum(divisors)
    return 0
        
def twentyfour():
    return 0

        
def twentyfive():
    """
    The Fibonacci sequence is defined by the recurrence relation:
    
    Fn = Fn-1 + Fn-2, where F1 = 1 and F2 = 1.
    Hence the first 12 terms will be:
    
    F1 = 1
    F2 = 1
    F3 = 2
    F4 = 3
    F5 = 5
    F6 = 8
    F7 = 13
    F8 = 21
    F9 = 34
    F10 = 55
    F11 = 89
    F12 = 144
    The 12th term, F12, is the first term to contain three digits.
    
    What is the first term in the Fibonacci sequence to contain 1000 digits?
    
    ANSWER: 4782
    """
    
    numbers = [0, 1]
    
    i = 0
    
    while len(str(numbers[-1])) < 1000:
        numbers.append(fibonacci(numbers[i], numbers[i + 1]))
        i += 1
        
    return len(numbers) - 1

def twentyeight():
    """
    Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:
    
    21 22 23 24 25
    20  7  8  9 10
    19  6  1  2 11
    18  5  4  3 12
    17 16 15 14 13
    
    It can be verified that the sum of the numbers on the diagonals is 101.
    
    What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?
    
    ANSWER: 669171001
    """
    
    size = 1001
    
    iterations = (size/2)+1
    count = 0
    sides = 8
    steps = 2
    28
    diagonals = []
    
    for i in range(0, iterations):
        if i == 0:
            count += 1
            diagonals.append(count)
        else:
            for j in range(sides * i):
                count += 1
                if (j + 1) % (steps * i) == 0:
                    diagonals.append(count)
    
    return sum(diagonals)
    

def twentynine():
    """Consider all integer combinations of ab for 2 <= a <= 5 and 2 <= b <= 5:
    
    2^2=4, 2^3=8, 2^4=16, 2^5=32
    3^2=9, 3^3=27, 3^4=81, 3%=243
    4^2=16, 4^3=64, 4^4=256, 4^5=1024
    5^2=25, 5^3=125, 5^4=625, 5^5=3125
    If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
    
    4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
    
    How many distinct terms are in the sequence generated by ab for 2 <= a <= 100 and 2 <= b <= 100?
    
    ANSWER: 9183
    """
    
    terms = []
    
    a = 2
    b = 100
    
    
    while a <= b:
        i = 2
        j = 100
        
        while i <= j:
            if a**i not in terms: terms.append(a**i)
            i += 1
        a += 1
    
    return len(terms)


def thirty():
    """
    Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:
    
    1634 = 14 + 64 + 34 + 44
    8208 = 84 + 24 + 04 + 84
    9474 = 94 + 44 + 74 + 44
    As 1 = 14 is not a sum it is not included.
    
    The sum of these numbers is 1634 + 8208 + 9474 = 19316.
    
    Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.
    
    ANSWER: 443839
    """
    
    fives = []
    total = 0
    
    
    for x in xrange(2, 1000000):
        
        y = sumTerms(getTerms(x))
        if x == y: fives.append(x)
        
    for x in fives:
        total += x
    
    return total
        

def thirtyfour():
    """
    145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.
    
    Find the sum of all numbers which are equal to the sum of the factorial of their digits.
    
    Note: as 1! = 1 and 2! = 2 are not sums they are not included.
    
    ANSWER: 40730
    """
    
    numbers = []
    
    for n in xrange(3, 1000000):
        digits = breakdown(n)
        if n == sumFactors(digits):
            numbers.append(n)
            
    return sum(numbers)
        


def thirtyfive():
    """
    The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.
    
    There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.
    
    How many circular primes are there below one million?
    
    ANSWER: 55
    """
    
    n = 197
    circulars = [2]
    
    
    for i in range(3, 1000000, 2):
        if i not in circulars: iscircular(i, circulars)
        
    return len(circulars)
        
def fifty():
    primes = []
    top = 1000000
    
    for x in range(top):
        if isprime(x): primes.append(x)
        
    
    i = 1
    longest = []
    
    while i <= len(primes):
        terms = []
        j = i
        while j <= len(primes) and sum(terms) + primes[-j] < top:
            terms.append(primes[-j])
            s = sum(terms)
            if isprime(s) == True and len(terms) > len(longest):
                longest = terms[:]
            j += 1
        i += 1
        
    return sum(longest)    




if __name__ == "__main__":
    problems = {1: one, 2: two, 3: three, 4: four, 5: five, 6: six, 7: seven, 8: eight, 9: nine, 10: ten, 11: eleven, 12: twelve, 13: thirteen, 14: fourteen, 15: fifteen,
                16: sixteen, 17: seventeen, 18: eighteen, 19: nineteen, 20: twenty, 21: twentyone, 22: twentytwo, 23: twentythree, 24: twentyfour, 25: twentyfive,
                28: twentyeight, 29: twentynine, 30: thirty, 34: thirtyfour, 35: thirtyfive, 50: fifty}
    
    while True:
        k = input("Enter problem to run (0 to exit, -1 to list problems): ")
        print
        starttime = time()
        if k == 0:
            print "Goodbye"
            exit()
        elif k == -1:
            print problems.keys()
        elif k in problems:
            print "The answer to problem %i is %i" % (k, problems[k]())
        else:
            print "That problem does not exist."
        
        elapsed = time() - starttime
        print "Problem %i ran in %f seconds." % (k, elapsed)
    
    