"""
This is the main file designed to contain all the Project Euler problems in one neat and tidy place.  The goal is to functionalize and standardize all of the problem solutions.
"""

from time import time
import math

# Common functions

def pythagorean(a, b):
    c = math.sqrt(pow(a, 2) + pow(b, 2))
    return c


# Functions for problems

def one():
    """
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
    
    Find the sum of all the multiples of 3 or 5 below 1000.
    
    ANSWER: 233168
    """
    
    i = 1
    sum = 0
    while i < 1000:
        if i % 3 == 0 or i % 5 == 0:
            sum = sum + i
            i = i + 1
        else:
            i = i + 1
    return sum
    
def two():
    """
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    
    ANSWER: 4613732
    """
    
    sum = 0
    i = 1
    j = 2
    
    while j < 4000000:
        if j % 2 == 0:
            sum = sum + j
            temp = i
            i = j
            j = temp + i
        else:
            temp = i
            i = j
            j = temp + i
    return sum


def three():
    """
    The prime factors of 13195 are 5, 7, 13 and 29.
    
    What is the largest prime factor of the number 600851475143 ?
    
    ANSWER: 6857
    """
    
    number = 600851475143
    
    i = 2
    prime = 0
    
    while number >= i:
        if number % i == 0:
            prime = i
            number = number / i
            i = 2
        else:
            i = i + 1
    return prime


def four():
    """
    A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 * 99.
    
    Find the largest palindrome made from the product of two 3-digit numbers.
    
    ANSWER: 906609
    """
    
    i = 999
    j = i
    largest = 0
    
    while i > 0:
        while j > 0:
            number = str(i * j)
            forward = str(number)
            reverse = ""
            for char in number:
                reverse = char + reverse
            if forward == reverse:
                if largest < i * j:
                    largest = i * j
                break
            else:
                j = j - 1
        i = i - 1
        j = i
    return largest    






def five():
    """
    2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
    
    What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
    
    ANSWER: 232792560
    """
    
    n = 20
    divisible = False
    
    while divisible == False:
        n += 20
        divisible = True
        for i in range(1, 21):
            if n % i != 0:
                divisible = False
                continue
    return n

def six():
    """
    The sum of the squares of the first ten natural numbers is,
    
    12 + 22 + ... + 102 = 385
    
    The square of the sum of the first ten natural numbers is,
    
    (1 + 2 + ... + 10)2 = 552 = 3025
    
    Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640.
    
    Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
    
    ANSWER: 25164150
    """
    
    sum_squared = 0
    squared_sum = 0
    
    for i in range(1, 101):
        sum_squared += i**2
        squared_sum += i
    squared_sum = squared_sum**2
    
    return squared_sum - sum_squared

def seven():
    """
    By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
    
    What is the 10001st prime number?
    
    ANSWER: 104743
    """
    
    total = 0
    n = 2
    
    while total < 10001:
        prime = True
        for i in range(2, n):
            if n % i == 0:
                prime = False
        if prime == True:
            total += 1
        n += 1
        
    return n 


def eight():
    """
    Find the greatest product of five consecutive digits in the 1000-digit number.
    
    73167176531330624919225119674426574742355349194934
    96983520312774506326239578318016984801869478851843
    85861560789112949495459501737958331952853208805511
    12540698747158523863050715693290963295227443043557
    66896648950445244523161731856403098711121722383113
    62229893423380308135336276614282806444486645238749
    30358907296290491560440772390713810515859307960866
    70172427121883998797908792274921901699720888093776
    65727333001053367881220235421809751254540594752243
    52584907711670556013604839586446706324415722155397
    53697817977846174064955149290862569321978468622482
    83972241375657056057490261407972968652414535100474
    82166370484403199890008895243450658541227588666881
    16427171479924442928230863465674813919123162824586
    17866458359124566529476545682848912883142607690042
    24219022671055626321111109370544217506941658960408
    07198403850962455444362981230987879927244284909188
    84580156166097919133875499200524063689912560717606
    05886116467109405077541002256983155200055935729725
    71636269561882670428252483600823257530420752963450
    """
    
    number = "73167176531330624919225119674426574742355349194934\
96983520312774506326239578318016984801869478851843\
85861560789112949495459501737958331952853208805511\
12540698747158523863050715693290963295227443043557\
66896648950445244523161731856403098711121722383113\
62229893423380308135336276614282806444486645238749\
30358907296290491560440772390713810515859307960866\
70172427121883998797908792274921901699720888093776\
65727333001053367881220235421809751254540594752243\
52584907711670556013604839586446706324415722155397\
53697817977846174064955149290862569321978468622482\
83972241375657056057490261407972968652414535100474\
82166370484403199890008895243450658541227588666881\
16427171479924442928230863465674813919123162824586\
17866458359124566529476545682848912883142607690042\
24219022671055626321111109370544217506941658960408\
07198403850962455444362981230987879927244284909188\
84580156166097919133875499200524063689912560717606\
05886116467109405077541002256983155200055935729725\
71636269561882670428252483600823257530420752963450"

    greatest = 0
    
    i = 0
    while i < len(number) - 4:
        product = 1
        for j in range(5):
            product *= int(number[i + j])
            j += 1
        if product > greatest:
            greatest = product
        i += 1
        
    return greatest

def nine():
    """
    A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
    
    a2 + b2 = c2
    For example, 32 + 42 = 9 + 16 = 25 = 52.
    
    There exists exactly one Pythagorean triplet for which a + b + c = 1000.
    Find the product abc.
    
    ANSWER: 31875000
    """
    
    a = 3
    b = 4
    c = pythagorean(a, b)
    
    while a + b + c < 1001:
        while a + b + c < 1001:
            if a + b + c == 1000:
                return a * b * c
            b += 1
            c = pythagorean(a, b)
        a += 1
        b = a + 1
        c = pythagorean(a, b)
          
    
def ten():
    """
    The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
    
    Find the sum of all the primes below two million.
    """
    
    primes = [2]
    n = 3
    sum = 0
    
    while n < 2000000:
        isprime = True
        for prime in primes:
            if n % prime == 0:
                isprime = False
                break
        if isprime == True:
            primes.append(n)
        isprime = True
        n += 2
    
    for prime in primes:
        sum += prime
        
    return sum

def eleven():
    """In the 20*20 grid below, four numbers along a diagonal line have been marked in red.
    
    08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
    49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
    81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
    52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
    22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
    24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
    32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
    67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
    24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
    21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
    78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
    16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
    86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
    19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
    04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
    88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
    04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
    20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
    20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
    01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
    The product of these numbers is 26 * 63 * 78 * 14 = 1788696.
    
    What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20*20 grid?
    
    ANSWER: 70600674
    """
    
    matrix = [[8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 5, 77, 91, 8],
              [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0],
              [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65],
              [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91],
              [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],
              [24, 47, 32, 60, 99, 03, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],
              [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],
              [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21],
              [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],
              [21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95],
              [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92],
              [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57],
              [86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],
              [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40],
              [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],
              [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],
              [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36],
              [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16],
              [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54],
              [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]]
    
    greatest = 0
    product = 1
    
    # Find highest product of four left to right numbers
    for i in range(20):
        j = 0
        while j < 17:
            for k in range(4):
                product *= matrix[i][j + k]
            if product > greatest:
                greatest = product
            product = 1
            j += 1
        
    # Find highest product of four up and down numbers
    for i in range(20):
        j = 0
        while j < 17:
            for k in range(4):
                product += matrix[j + k][i]
            if product > greatest:
                greatest = product
            product = 1
            j += 1
            
    # Find highest product of four diagonal up/down numbers
    for i in range(17):
        j = 0
        while j < 17:
            for k in range(4):
                product *= matrix[i + k][j + k]
            if product > greatest:
                greatest = product
            product = 1
            j += 1
    
    # Find highest product of four diagonal down/up numbers
    for i in range(3, 20):
        j = 0
        while j < 17:
            for k in range(4):
                product *= matrix[i - k][j + k]
            if product > greatest:
                greatest = product
            product = 1
            j += 1
            
            
    #for i in range(17):
    #    for j in range(4):
    #        print matrix[i + j][0],
    #    print
    
    return greatest

def twelve():
    return 0
def thirteen():
    return 0
def fourteen():
    return 0
def fifteen():
    return 0
def sixteen():
    return 0
def seventeen():
    return 0
def eighteen():
    return 0
def nineteen():
    return 0
def twenty():
    return 0



if __name__ == "__main__":
    problems = {1: one, 2: two, 3: three, 4: four, 5: five, 6: six, 7: seven, 8: eight, 9: nine, 10: ten, 11: eleven, 12: twelve, 13: thirteen, 14: fourteen, 15: fifteen,
                16: sixteen, 17: seventeen, 18: eighteen, 19: nineteen, 20: twenty}
    
    while True:
        k = input("Enter problem to run: ")
        starttime = time()
        if k == 0:
            print "Goodbye"
            exit()
        elif k in problems:
            print "The answer to problem %i is %i" % (k, problems[k]())
        else:
            print "That problem does not exist."
        
        elapsed = time() - starttime
        print "Problem %i ran in %f seconds." % (k, elapsed)
    
    